#!/usr/bin/env bash

#-------------------------------------------------------------------------------
# Engarde VPS Setup Script (vps-wizard.sh)
#-------------------------------------------------------------------------------

set -euo pipefail
trap 'echo "[ERROR] Line $LINENO exited with status $?" >&2' ERR

# Ensure root privileges
[[ $(id -u) -eq 0 ]] || { echo "Must be run as root." >&2; exit 1; }

# Define flag file early
FLAG_FILE="/etc/engarde_installed.flag"

# Install dependencies (only on first run)
if [[ ! -f "$FLAG_FILE" ]]; then
  echo "== Installing dependencies =="
  apt-get update -qq
  apt-get install -y wireguard iproute2 iptables wget yq
fi

# OS version check
OS_VER=$(grep -oP '(?<=^VERSION_ID=")\d+' /etc/os-release)
(( OS_VER >= 10 )) || { echo "Requires Debian 10+." >&2; exit 1; }

# Configuration variables
BASE_PORT=65500
PORT_WG=$BASE_PORT
PORT_ENGARDE=$((BASE_PORT + 1))
PORT_GUI=$((BASE_PORT + 2))
PORT_SSH=65522
CLIENT_WG_IP="10.0.0.2/24"

ENGARDE_GO_URL="https://engarde.linuxzogno.org/builds/master/linux/amd64/engarde-server"
ENGARDE_RUST_URL="https://github.com/Brazzo978/engarde/releases/download/0.0.1/engarde_server"
ENGARDE_BIN="/usr/local/bin/engarde-server"
ENGARDE_CFG="/etc/engarde.yml"
WG_CFG="/etc/wireguard/wg0.conf"
CLIENT_CONFIG_FILE="$(pwd)/client_config"

#-------------------------------------------------------------------------------
# WireGuard installation and config
enable_wireguard() {
  echo -e "\n== Configuring WireGuard server =="
  mkdir -p /etc/wireguard
  wg genkey | tee /etc/wireguard/server_private.key | wg pubkey > /etc/wireguard/server_public.key
  wg genkey | tee /etc/wireguard/client_private.key | wg pubkey > /etc/wireguard/client_public.key

  echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
  echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.conf
  sysctl -p

  cat > "$WG_CFG" <<EOF
[Interface]
Address = 10.0.0.1/24
ListenPort = $PORT_WG
PrivateKey = $(cat /etc/wireguard/server_private.key)
PostUp = iptables -A FORWARD -i $(ip route show default | awk '/default/{print $5}') -o wg0 -j ACCEPT; \
         iptables -A FORWARD -i wg0 -j ACCEPT; \
         iptables -t nat -A POSTROUTING -o $(ip route show default | awk '/default/{print $5}') -j MASQUERADE
PostDown = iptables -D FORWARD -i $(ip route show default | awk '/default/{print $5}') -o wg0 -j ACCEPT; \
           iptables -D FORWARD -i wg0 -j ACCEPT; \
           iptables -t nat -D POSTROUTING -o $(ip route show default | awk '/default/{print $5}') -j MASQUERADE

[Peer]
PublicKey  = $(cat /etc/wireguard/client_public.key)
AllowedIPs = ${CLIENT_WG_IP%%/*}/32
EOF

  chmod 600 "$WG_CFG"
  systemctl enable wg-quick@wg0
  systemctl start wg-quick@wg0
}

#-------------------------------------------------------------------------------
# Engarde server installation and config
install_engarde_server() {
  echo -e "\n== Configuring Engarde server =="
  wget -qO "$ENGARDE_BIN" "$ENG_URL"
  chmod +x "$ENGARDE_BIN"

  cat > "$ENGARDE_CFG" <<EOF
server:
  description: "Engarde Server Instance"
  listenAddr: "0.0.0.0:$PORT_ENGARDE"
  dstAddr:    "127.0.0.1:$PORT_WG"
  mode: "$ENG_MODE"
  clientTimeout: 30
  writeTimeout: 10
  webManager:
    listenAddr: "0.0.0.0:$PORT_GUI"
    username: "engarde"
    password: "engarde"
EOF

  cat > /etc/systemd/system/engarde.service <<EOF
[Unit]
Description=Engarde Server
After=network.target

[Service]
ExecStart=$ENGARDE_BIN $ENGARDE_CFG
Restart=always
User=root

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable engarde
  systemctl start engarde
}

#-------------------------------------------------------------------------------
# SSH port enforcement
enforce_ssh_port() {
  sed -i -E "s/^#?Port .*/Port $PORT_SSH/" /etc/ssh/sshd_config
  systemctl restart sshd
}


#-------------------------------------------------------------------------------
# Client config generation (shell)
generate_client_sh() {
  echo -e "\n== Generating client_config.sh =="
  PUB_IFACE=$(ip route show default | awk '/default/{print $5}')
  PUB_IP=$(ip -4 addr show dev "$PUB_IFACE" scope global \
    | grep -Po '(?<=inet )[^/]+')

  cat > "${CLIENT_CONFIG_FILE}.sh" <<EOF
#!/usr/bin/env bash
# autogenerated by server

CLIENT_WG_PRIV='$(cat /etc/wireguard/client_private.key)'
CLIENT_WG_IP='${CLIENT_WG_IP}'
SERVER_WG_PUB='$(cat /etc/wireguard/server_public.key)'
SERVER_ENDPOINT='${PUB_IP}:${PORT_WG}'
DNS_SERVER='1.1.1.1'

ENG_DESC='client-$(hostname)'
ENG_LISTEN='127.0.0.1:59401'
ENG_DST='${PUB_IP}:${PORT_ENGARDE}'
ENG_MODE='udp'
ENG_USER='engarde'
ENG_PASS='engarde'
EOF

  chmod +x "${CLIENT_CONFIG_FILE}.sh"
  echo "Client config script: ${CLIENT_CONFIG_FILE}.sh"
}

#-------------------------------------------------------------------------------
# Uninstall cleanup function
uninstall_all() {
  echo -e "
== Uninstalling Engarde and WireGuard =="
  # Stop and disable services
  systemctl stop engarde wg-quick@wg0 || true
  systemctl disable engarde wg-quick@wg0 || true
  # Remove systemd service
  rm -f /etc/systemd/system/engarde.service
  systemctl daemon-reload
  # Remove binaries and configs
  rm -f "$ENGARDE_BIN" /usr/local/bin/engarde-client
  rm -rf /etc/engarde.yml /etc/engarde-client
  rm -rf /etc/wireguard
  rm -f "$CLIENT_CONFIG_FILE"
  # Remove flag
  rm -f "$FLAG_FILE"
  # Flush iptables rules
  iptables -t nat -F PREROUTING
  iptables -t nat -F POSTROUTING
  iptables -F FORWARD
  # Delete wg interface if exists
  ip link delete wg0 2>/dev/null || true
  echo "Cleanup complete. Exiting."
  exit 0
}

toggle_pf() {
  WG_CFG="/etc/wireguard/wg0.conf"
  IFACE=$(ip route show default | awk '/default/{print $5}')
  TCP_RULE="iptables -t nat -A PREROUTING -i $IFACE -p tcp --dport 1:65499 -j DNAT --to-destination 10.0.0.2"
  UDP_RULE="iptables -t nat -A PREROUTING -i $IFACE -p udp --dport 1:65499 -j DNAT --to-destination 10.0.0.2"

  # Controllo se è già presente la riga TCP (basta controllarne una)
  if grep -Fq "$TCP_RULE" "$WG_CFG"; then
    echo "Rimuovo regole DNAT da wg0.conf..."
    # Rimuovo entrambe le righe
    sed -i "\|$TCP_RULE|d" "$WG_CFG"
    sed -i "\|$UDP_RULE|d" "$WG_CFG"
    echo "Regole DNAT rimosse."
  else
    echo "Aggiungo regole DNAT a wg0.conf..."
    # Inserisco le due righe subito dopo la riga [Interface]
    sed -i "/^\[Interface\]/a PostUp = $TCP_RULE\nPostUp = $UDP_RULE\nPostDown = iptables -t nat -D PREROUTING -i $IFACE -p tcp --dport 1:65499 -j DNAT --to-destination 10.0.0.2\nPostDown = iptables -t nat -D PREROUTING -i $IFACE -p udp --dport 1:65499 -j DNAT --to-destination 10.0.0.2" "$WG_CFG"
    echo "Regole DNAT aggiunte."
  fi

  # Riavvio WireGuard per applicare le modifiche
  echo "Riavvio wg-quick@wg0..."
  systemctl restart wg-quick@wg0
  echo "Fatto."
}


#-------------------------------------------------------------------------------
# Management menu
manage() {
  echo -e "
== Management Menu =="
  PS3="Select action: "
  select opt in \
    "Status Engarde" "Restart Engarde" "Status WireGuard" "Restart WireGuard" \
    "Toggle Port Forwarding" "Generate Client Config" "Uninstall" "Exit"; do
    case $REPLY in
      1) systemctl status engarde;;
      2) systemctl restart engarde; echo "Engarde restarted.";;
      3) systemctl status wg-quick@wg0;;
      4) systemctl restart wg-quick@wg0; echo "WireGuard restarted.";;
      5) toggle_pf;;
      6) generate_client_sh; echo "Client config at $CLIENT_CONFIG_FILE";;
      7) uninstall_all;;
      8) break;;
      *) echo "Invalid option.";;
    esac
  done
}

#-------------------------------------------------------------------------------
# Main Entry
if systemctl is-enabled --quiet engarde && [[ -f "$FLAG_FILE" ]]; then
  echo "Detected existing installation. Entering management menu."
  manage
  exit 0
fi

# First-time setup
# Select Engarde server version
echo -e "
== Engarde Server Version =="
echo " 1) Go (stable)"
echo " 2) Rust (performance)"
while true; do
  read -rp "Choice (1 or 2): " ver
  case "$ver" in
    1) ENG_URL=$ENGARDE_GO_URL; break;;
    2) ENG_URL=$ENGARDE_RUST_URL; break;;
    *) echo "Enter 1 or 2.";;
  esac

done

# First-time setup
enable_wireguard
install_engarde_server
enforce_ssh_port
touch "$FLAG_FILE"
generate_client_sh

echo -e "\nSetup complete. Client config: $CLIENT_CONFIG_FILE"

# Enter management menu
manage
exit 0
