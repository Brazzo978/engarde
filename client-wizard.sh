#!/usr/bin/env bash

set -euo pipefail
trap 'echo "[ERROR] Line $LINENO exited with status $?" >&2' ERR

#-------------------------------------------------------------------------------
# Ensure root privileges
[[ $(id -u) -eq 0 ]] || { echo "Devi essere root." >&2; exit 1; }

#-------------------------------------------------------------------------------
# Install dependencies if missing
echo "== Installazione dipendenze =="
apt-get update -qq
apt-get install -y wireguard iproute2 iptables yq wget

#-------------------------------------------------------------------------------
# Import configuration file generated by server
CONFIG_FILE="client_config.yaml"
if [[ ! -f "$CONFIG_FILE" ]]; then
  cat <<EOF >&2
Errore: file di configurazione client non trovato: '$CONFIG_FILE'.
Posiziona in questa cartella il file generato dallo script server e rinominalo esattamente '$CONFIG_FILE'.
EOF
  exit 1
fi

#-------------------------------------------------------------------------------
# Engarde client binaries URLs
ENG_CLIENT_GO_URL="https://engarde.linuxzogno.org/builds/master/linux/amd64/engarde-client"
ENG_CLIENT_RUST_URL="https://github.com/Brazzo978/engarde/releases/download/0.0.1/engarde_client"

# Select Engarde client version
echo "Quale versione Engarde client installare?"
echo "  1) Go"
echo "  2) Rust"
while true; do
  read -rp "Scelta (1 o 2): " engv
  case "$engv" in
    1) ENG_CLIENT_URL="$ENG_CLIENT_GO_URL"; break;;
    2) ENG_CLIENT_URL="$ENG_CLIENT_RUST_URL"; break;;
    *) echo "Inserisci 1 o 2.";;
  esac
done

# Download Engarde client
echo "Scarico Engarde client da $ENG_CLIENT_URL..."
wget -qO /usr/local/bin/engarde-client "$ENG_CLIENT_URL"
chmod +x /usr/local/bin/engarde-client

#-------------------------------------------------------------------------------
# Load imported settings
echo "Caricamento configurazione da $CONFIG_FILE..."
CLIENT_WG_PRIV=$(yq eval -e '.wireguard.privateKey' $CONFIG_FILE)
CLIENT_WG_IP=$(yq eval -e '.wireguard.address' $CONFIG_FILE)
SERVER_WG_PUB=$(yq eval -e '.wireguard.peerPublicKey' $CONFIG_FILE)
SERVER_ENDPOINT=$(yq eval -e '.wireguard.endpoint' $CONFIG_FILE)
DNS_SERVER=$(yq eval -e '.wireguard.dns' $CONFIG_FILE)
ENG_DESC=$(yq eval -e '.engarde.description' $CONFIG_FILE)
ENG_LISTEN=$(yq eval -e '.engarde.listenAddr' $CONFIG_FILE)
ENG_GUI_PORT=${ENG_LISTEN##*:}
ENG_DST=$(yq eval -e '.engarde.dstAddr' $CONFIG_FILE)
ENG_USER=$(yq eval -e '.engarde.username' $CONFIG_FILE)
ENG_PASS=$(yq eval -e '.engarde.password' $CONFIG_FILE)

# Paths & filenames
WG_INTERFACE="wg0"
WG_CONF_DIR="/etc/wireguard"
ENG_CFG_DIR="/etc/engarde-client"
USED_IFACES_FILE="$ENG_CFG_DIR/used_interfaces.list"
RT_TABLES_FILE="/etc/iproute2/rt_tables"

#-------------------------------------------------------------------------------
# Interface management functions
list_ifaces() { ip -o link show up | awk -F': ' '{print $2}'; }
list_used_ifaces() { [[ -f "$USED_IFACES_FILE" ]] && cat "$USED_IFACES_FILE" || true; }
list_available_ifaces() {
  mapfile -t all < <(list_ifaces)
  mapfile -t used < <(list_used_ifaces)
  for i in "${all[@]}"; do
    [[ "$i" != "lo" && "$i" != "$WG_INTERFACE" && ! " ${used[*]} " =~ " $i " ]] && echo "$i"
  done
}
save_used_iface() { echo "$1" >> "$USED_IFACES_FILE"; }
remove_used_iface() { grep -v -x "$1" "$USED_IFACES_FILE" > "$USED_IFACES_FILE.tmp" && mv "$USED_IFACES_FILE.tmp" "$USED_IFACES_FILE"; }
add_rt_table() {
  local iface=$1 tbl="peer_$iface" id
  id=$(($(grep -E "^[0-9]+ $tbl" "$RT_TABLES_FILE"|wc -l)+200))
  echo "$id $tbl" >> "$RT_TABLES_FILE"
}
remove_rt_table() {
  local iface=$1 tbl="peer_$iface"
  sed -i "/ $tbl$/d" "$RT_TABLES_FILE"
}

add_interface() {
  echo "
Interfacce disponibili:"; mapfile -t avail < <(list_available_ifaces)
  (( ${#avail[@]} )) || { echo "Nessuna interfaccia libera."; return; }
  for idx in "${!avail[@]}"; do echo "  $idx) ${avail[$idx]}"; done
  read -rp "Seleziona interfaccia da bindare: " sel
  [[ "$sel" =~ ^[0-9]+$ ]] && iface="${avail[$sel]}" || { echo "Scelta non valida."; return; }
  save_used_iface "$iface"; add_rt_table "$iface"
  ip rule add from ${CLIENT_WG_IP%%/*} lookup peer_$iface
  ip route add default dev "$iface" table peer_$iface
  echo "Interfaccia '$iface' bindata e routing policy creata (peer_$iface)."
}

remove_interface() {
  echo "
Interfacce bindate:"; mapfile -t used < <(list_used_ifaces)
  (( ${#used[@]} )) || { echo "Nessuna interfaccia da rimuovere."; return; }
  for idx in "${!used[@]}"; do echo "  $idx) ${used[$idx]}"; done
  read -rp "Seleziona interfaccia da rimuovere: " sel
  [[ "$sel" =~ ^[0-9]+$ ]] && iface="${used[$sel]}" || { echo "Scelta non valida."; return; }
  remove_used_iface "$iface"; ip rule del from ${CLIENT_WG_IP%%/*} lookup peer_$iface || true
  ip route del default dev "$iface" table peer_$iface || true; remove_rt_table "$iface"
  echo "Interfaccia '$iface' rimossa e routing policy eliminata."
}

list_interfaces_bound() {
  echo "Interfacce bindate:"; list_used_ifaces || echo "nessuna"
}

#-------------------------------------------------------------------------------
# Service commands
start_wg() { wg-quick up "$CONFIG_FILE"; }
stop_wg()  { wg-quick down "$CONFIG_FILE"; }
status_wg(){ wg show; }
start_engarde_client() { engarde-client "$CONFIG_FILE" &; }
stop_engarde_client()  { pkill -f "engarde-client $CONFIG_FILE"; }
status_engarde_client(){ pgrep -af "engarde-client $CONFIG_FILE"; }

#-------------------------------------------------------------------------------
# Interactive management menu
manage() {
  mkdir -p "$ENG_CFG_DIR"; touch "$USED_IFACES_FILE"
  while true; do
    echo -e "
== Gestione Client ==
GUI web Engarde client: porta $ENG_GUI_PORT
1) Aggiungi interfaccia
2) Mostra interfacce bindate
3) Rimuovi interfaccia
4) Avvia WireGuard
5) Ferma WireGuard
6) Stato WireGuard
7) Avvia Engarde client
8) Ferma Engarde client
9) Stato Engarde client
0) Esci"
    read -rp "Opzione: " opt
    case $opt in
      1) add_interface;;
      2) list_interfaces_bound;;
      3) remove_interface;;
      4) start_wg;;
      5) stop_wg;;
      6) status_wg;;
      7) start_engarde_client;;
      8) stop_engarde_client;;
      9) status_engarde_client;;
      0) exit 0;;
      *) echo "Scelta non valida.";;
    esac
  done
}

#-------------------------------------------------------------------------------
# Main: always go to manage
echo "Pronto per gestire client."
manage
