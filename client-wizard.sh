#!/usr/bin/env bash

set -euo pipefail
trap 'echo "[ERROR] Line $LINENO exited with status $?" >&2' ERR

#-------------------------------------------------------------------------------
# Import configuration file generated by server
CONFIG_FILE="client_config.yaml"
if [[ ! -f "$CONFIG_FILE" ]]; then
  cat <<EOF >&2
Errore: file di configurazione client non trovato: '$CONFIG_FILE'.
Posiziona in questa cartella il file generato dallo script server e rinominalo esattamente '$CONFIG_FILE'.
EOF
  exit 1
fi

#-------------------------------------------------------------------------------
# Helpers
check_root() { [[ $(id -u) -eq 0 ]] || { echo "Devi essere root." >&2; exit 1; } }

#-------------------------------------------------------------------------------
# Root & OS check
check_root
OS_VER=$(grep -oP '(?<=^VERSION_ID=")\d+' /etc/os-release)
(( OS_VER >= 10 )) || { echo "Requires Debian 10+." >&2; exit 1; }

#-------------------------------------------------------------------------------
# Load imported settings
echo "Caricamento configurazione da $CONFIG_FILE..."
# Assumiamo yq installato per parsing YAML
CLIENT_WG_PRIV="$(yq eval -e '.wireguard.privateKey' $CONFIG_FILE)"
CLIENT_WG_IP="$(yq eval -e '.wireguard.address' $CONFIG_FILE)"
SERVER_WG_PUB="$(yq eval -e '.wireguard.peerPublicKey' $CONFIG_FILE)"
SERVER_ENDPOINT="$(yq eval -e '.wireguard.endpoint' $CONFIG_FILE)"
DNS_SERVER="$(yq eval -e '.wireguard.dns' $CONFIG_FILE)"
ENG_DESC="$(yq eval -e '.engarde.description' $CONFIG_FILE)"
ENG_LISTEN="$(yq eval -e '.engarde.listenAddr' $CONFIG_FILE)"
ENG_DST="$(yq eval -e '.engarde.dstAddr' $CONFIG_FILE)"
ENG_USER="$(yq eval -e '.engarde.username' $CONFIG_FILE)"
ENG_PASS="$(yq eval -e '.engarde.password' $CONFIG_FILE)"

# Paths & filenames
WG_INTERFACE="wg0"
WG_CONF_DIR="/etc/wireguard"
ENG_CFG_DIR="/etc/engarde-client"
USED_IFACES_FILE="$ENG_CFG_DIR/used_interfaces.list"

#-------------------------------------------------------------------------------
# Functions for interface binding and routing
list_ifaces() { ip -o link show up | awk -F': ' '{print $2}'; }
list_available_ifaces() {
  mapfile -t all < <(list_ifaces)
  mapfile -t used < <( [[ -f "$USED_IFACES_FILE" ]] && cat "$USED_IFACES_FILE" )
  for i in "${all[@]}"; do
    [[ "$i" != "lo" && "$i" != "$WG_INTERFACE" && ! " ${used[*]} " =~ " $i " ]] && echo "$i"
  done
}
save_used_iface() { echo "$1" >> "$USED_IFACES_FILE"; }

#-------------------------------------------------------------------------------
# Management menu actions
add_interface() {
  echo "Interfacce disponibili:"; mapfile -t avail < <(list_available_ifaces)
  (( ${#avail[@]} )) || { echo "Nessuna interfaccia libera."; return; }
  for idx in "${!avail[@]}"; do echo "  $idx) ${avail[$idx]}"; done
  read -rp "Seleziona interfaccia: " sel
  [[ "$sel" =~ ^[0-9]+$ ]] && iface="${avail[$sel]}" || { echo "Scelta non valida."; return; }
  save_used_iface "$iface"
  # Policy routing
  tbl="peer_$iface"; echo "200 $tbl" >> /etc/iproute2/rt_tables
  ip rule add from ${CLIENT_WG_IP%%/*} lookup $tbl
  ip route add default dev "$iface" table $tbl
  echo "Escluso $iface e aggiunto routing table $tbl."
}

#-------------------------------------------------------------------------------
# Service commands
start_wg() { wg-quick up "$CONFIG_FILE"; }
stop_wg()  { wg-quick down "$CONFIG_FILE"; }
status_wg(){ wg show; }
start_engarde_client() { engarde-client "$CONFIG_FILE" &; }
stop_engarde_client()  { pkill -f "engarde-client $CONFIG_FILE"; }
status_engarde_client(){ pgrep -af "engarde-client $CONFIG_FILE"; }

#-------------------------------------------------------------------------------
# Interactive management menu
manage() {
  check_root
  mkdir -p "$ENG_CFG_DIR"
  touch "$USED_IFACES_FILE"
  while true; do
    echo -e "\n== Gestione Client ==\n1) Aggiungi interfaccia\n2) Mostra interfacce escluse\n3) Rimuovi interfaccia (TODO)\n4) Avvia WireGuard\n5) Ferma WireGuard\n6) Stato WireGuard\n7) Avvia Engarde client\n8) Ferma Engarde client\n9) Stato Engarde client\n0) Esci"
    read -rp "Opzione: " opt
    case $opt in
      1) add_interface;;
      2) cat "$USED_IFACES_FILE";;
      3) echo "Implementare rimozione";;
      4) start_wg;;
      5) stop_wg;;
      6) status_wg;;
      7) start_engarde_client;;
      8) stop_engarde_client;;
      9) status_engarde_client;;
      0) exit 0;;
      *) echo "Scelta non valida.";;
    esac
  done
}

#-------------------------------------------------------------------------------
# Main: always go to manage (install handled by server)
manage
